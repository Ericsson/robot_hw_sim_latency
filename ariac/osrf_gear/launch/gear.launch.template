<?xml version="1.0"?>
<launch>
  <arg name="competition_mode" value="$(optenv ARIAC_COMPETITION false)" />

  <!-- run a relay to make joint_states available on ariac/joint_states -->
  <node name="relay_joint_states" pkg="topic_tools" type="relay"
        args="/joint_states /ariac/joint_states" required="true" output="log" />

  <remap from="joint_states" to="ariac/joint_states" />

  <arg name="limited" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="world_path" />
  <arg name="gear_urdf_xacro" />
  <arg name="state_log_dir" value="$(env HOME)/.ariac/log/gazebo" />

  <!-- run startup script -->
  <node name="startup_ariac" pkg="osrf_gear" type="startup.sh" output="screen" />

  <arg unless="$(arg competition_mode)" name="enable_gz_ros_network" value="true"/>
  <arg     if="$(arg competition_mode)" name="enable_gz_ros_network" value="false"/>

  <!-- set latency plugin -->
  <!--<rosparam param="/robot_hw_sim_latency/latency_plugin">latency_plugin_simple_queue/SimpleQueueLatencyPlugin</rosparam>-->
  <!--<rosparam param="/latency_plugin_simple_queue/queue_length">3</rosparam>-->
  <!--<rosparam param="/robot_hw_sim_latency/latency_plugin">latency_plugin_velocity_publisher/VelocityPublisherPlugin</rosparam>-->
  <rosparam param="/robot_hw_sim_latency/latency_plugin">latency_plugin_velocity_control/VelocityControlPlugin</rosparam>
  
  <rosparam file="$(find osrf_gear)/launch/gazebo_config.yaml" command="load"/>

  <!-- startup simulated world -->
  <include file="$(find osrf_gear)/launch/empty_world.launch">
    <arg name="world_name" default="$(arg world_path)"/>
    <!-- Always start paused because the arm spawn needs it that way. -->
    <arg name="paused" value="true"/>
    <arg name="enable_ros_network" value="$(arg enable_gz_ros_network)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="extra_gazebo_args" value="@('-r --record_path=$(arg state_log_dir)' if options['gazebo_state_logging'] else '')" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="verbose" value="$(arg verbose)" />
    <!--<arg name="pub_clock_frequency" value="1000"/>-->

  </include>

  <!-- load the URDF (it will include the robot arm model) -->
  <!--<param name="robot_description"
         command="$(find xacro)/xacro.py '$(arg gear_urdf_xacro)' use_effort_interface:=true" />-->
<!--
       <param name="robot_description"
         command="$(find xacro)/xacro.py '$(arg gear_urdf_xacro)' use_velocity_interface:=true" />
-->

       <param name="robot_description"
         command="$(find xacro)/xacro.py '$(arg gear_urdf_xacro)' use_pos_vel_interface:=true" />


@[if arm]@
@{
initial_joint_states_string = \
  ' '.join(['-J {0} {1}'.format(k, v) for k, v in arm.initial_joint_states.items()])
}@
@[if arm.type == 'ur10']@

  <!-- load ur10 -->
  <include file="$(find osrf_gear)/launch/ur10/ur10.xml">
    <arg name="limited" value="$(arg limited)" />
    <arg name="extra_spawn_model_args" value="@(initial_joint_states_string)" />
    <arg name="set_robot_description" value="false" />
  </include>
@[end if]@
@[end if]@

@[if options['spawn_extra_models']]@
  <!-- spawn any other models -->
@[for model_name, model in models_to_spawn.items()]@
@{
initial_pose_string = \
  ' '.join([val for pair in zip(['-x', '-y', '-z'], model.pose.xyz) for val in pair]) + " " + \
  ' '.join([val for pair in zip(['-R', '-P', '-Y'], model.pose.rpy) for val in pair])
}@

  <node name="osrf_gear_spawn_@(model_name.replace('|', '_'))" pkg="gazebo_ros" type="spawn_model"
    args="
      -file $(find osrf_gear)/models/@(model.type)_ariac/model.sdf
      -sdf
      -reference_frame @(model.reference_frame)
      @(initial_pose_string)
      -model @(model_name)" />
@[end for]@
@[end if]@

</launch>
